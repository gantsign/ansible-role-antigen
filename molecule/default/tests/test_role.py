import pytest

import os

import testinfra.utils.ansible_runner

testinfra_hosts = testinfra.utils.ansible_runner.AnsibleRunner(
    os.environ['MOLECULE_INVENTORY_FILE']).get_hosts('all')


@pytest.mark.parametrize('username', [
    'test_usr1',
    'test_usr2',
])
def test_antigen_install(File, username):
    antigen = File('/home/' + username + '/.antigen')
    assert antigen.exists
    assert antigen.is_directory
    assert antigen.user == username
    assert antigen.group in [username, 'users']


@pytest.mark.parametrize('username', [
    'test_usr1',
    'test_usr2',
])
def test_oh_my_zsh_install(File, username):
    antigen = File('/home/' + username +
                   '/.antigen/bundles/robbyrussell/oh-my-zsh')
    assert antigen.exists
    assert antigen.is_directory
    assert antigen.user == username
    assert antigen.group in [username, 'users']


@pytest.mark.parametrize('username', [
    'test_usr1',
    'test_usr2',
])
def test_zsh_config(File, username):
    zshrc = File('/home/' + username + '/.zshrc')
    assert zshrc.exists
    assert zshrc.is_file
    assert zshrc.user == username
    assert zshrc.group in [username, 'users']
    assert zshrc.contains('source ~/.antigenrc')


@pytest.mark.parametrize('username', [
    'test_usr1',
    'test_usr2',
])
def test_antigen_config(File, username):
    antigenrc = File('/home/' + username + '/.antigenrc')
    assert antigenrc.exists
    assert antigenrc.is_file
    assert antigenrc.user == username
    assert antigenrc.group in [username, 'users']
    assert antigenrc.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

source $HOME/.antigen/antigen.zsh

for i in ~/.antigen-etc/use.d/*.zsh; do
    if [ -r $i ]; then
        source $i
    fi
done
unset i

for i in ~/.antigen-etc/bundle.d/*.zsh; do
    if [ -r $i ]; then
        source $i
    fi
done
unset i

source ~/.antigen-etc/theme.zsh

antigen apply
'''.strip()


def test_simple_theme_config(File):
    theme = File('/home/test_usr1/.antigen-etc/theme.zsh')
    assert theme.exists
    assert theme.is_file
    assert theme.user == 'test_usr1'
    assert theme.group in ['test_usr1', 'users']
    assert theme.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

antigen theme robbyrussell
'''.strip()


def test_sinple_library_config(File):
    library = File('/home/test_usr1/.antigen-etc/use.d/oh-my-zsh.zsh')
    assert library.exists
    assert library.is_file
    assert library.user == 'test_usr1'
    assert library.group in ['test_usr1', 'users']
    assert library.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

antigen use oh-my-zsh
'''.strip()


def test_bundle_with_url_config(File):
    bundle = File('/home/test_usr1/.antigen-etc/bundle.d/git.zsh')
    assert bundle.exists
    assert bundle.is_file
    assert bundle.user == 'test_usr1'
    assert bundle.group in ['test_usr1', 'users']
    assert bundle.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

antigen bundle \\
    --url=git
'''.strip()


def test_bundle_with_location_config(File):
    bundle = File('/home/test_usr1/.antigen-etc/bundle.d/ant.zsh')
    assert bundle.exists
    assert bundle.is_file
    assert bundle.user == 'test_usr1'
    assert bundle.group in ['test_usr1', 'users']
    assert bundle.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

antigen bundle \\
    --url=robbyrussell/oh-my-zsh \\
    --loc=plugins/ant
'''.strip()


def test_theme_with_url_config(File):
    theme = File('/home/test_usr2/.antigen-etc/theme.zsh')
    assert theme.exists
    assert theme.is_file
    assert theme.user == 'test_usr2'
    assert theme.group in ['test_usr2', 'users']
    assert theme.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

antigen theme https://example.com/testTeme1.git
'''.strip()


def test_advanced_library_config(File):
    library = File('/home/test_usr2/.antigen-etc/use.d/prezto.zsh')
    assert library.exists
    assert library.is_file
    assert library.user == 'test_usr2'
    assert library.group in ['test_usr2', 'users']
    assert library.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

ENV_TEST1=testValue1

antigen use prezto \\
    --verbose
'''.strip()


def test_bundle_with_args_and_env_config(File):
    bundle = File('/home/test_usr2/.antigen-etc/bundle.d/mvn.zsh')
    assert bundle.exists
    assert bundle.is_file
    assert bundle.user == 'test_usr2'
    assert bundle.group in ['test_usr2', 'users']
    assert bundle.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

ENV_TEST2=testValue2

antigen bundle \\
    --url=mvn \\
    --no-local-clone
'''.strip()


def test_bundle_with_tag_config(File):
    bundle = File('/home/test_usr2/.antigen-etc/bundle.d/gradle.zsh')
    assert bundle.exists
    assert bundle.is_file
    assert bundle.user == 'test_usr2'
    assert bundle.group in ['test_usr2', 'users']
    assert bundle.content_string.strip() == '''
#
# Ansible managed: Do NOT edit this file manually!
#

ENV_TEST3=testValue3

antigen bundle \\
    --url=https://example.com/gradle.git \\
    --branch=1.0 \\
    --no-local-clone
'''.strip()


def test_console_setup(File):
    # console-setup is Debian family specific
    if File('/etc/debian_version').exists:
        setup = File('/etc/default/console-setup')
        assert setup.exists
        assert setup.is_file
        assert setup.user == 'root'
        assert setup.group == 'root'
        assert setup.contains('CHARMAP="UTF-8"')
